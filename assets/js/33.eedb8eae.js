(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{542:function(t,e,n){"use strict";n.r(e);var a=n(3),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一、前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),n("p",[t._v("该过程中用到的技术栈"),n("code",[t._v("git")]),t._v(" "),n("code",[t._v("gitlab")]),t._v(" "),n("code",[t._v("shell")])]),t._v(" "),n("p",[t._v("需要提前准备的内容")]),t._v(" "),n("ul",[n("li",[t._v("一个项目"),n("code",[t._v("myweb")])]),t._v(" "),n("li",[t._v("本机安装Git")]),t._v(" "),n("li",[t._v("一个Gitlab仓库")]),t._v(" "),n("li",[t._v("docker私有仓库")]),t._v(" "),n("li",[t._v("gitlab runner")])]),t._v(" "),n("p",[t._v("公司的代码一般都保存在私有化部署的Gitlab，要使用Gitlab的CI/CD，需要Gitlab版本>8.0.0")]),t._v(" "),n("p",[t._v("CI/CD虽然不难，但配置过程中有很多坑，而且有些要了解的概念也比较多，可以分成多个步骤，逐一攻破。")]),t._v(" "),n("h2",{attrs:{id:"二、入门ci实战"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、入门ci实战"}},[t._v("#")]),t._v(" 二、入门CI实战")]),t._v(" "),n("h3",{attrs:{id:"_1、安装、注册gitlab-runner"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、安装、注册gitlab-runner"}},[t._v("#")]),t._v(" 1、安装、注册Gitlab-runner")]),t._v(" "),n("p",[n("code",[t._v("gitlab-runner")]),t._v("需要提前进行安装和注册，"),n("a",{attrs:{href:"https://juejin.cn/post/6963927908444274718",title:"https://juejin.cn/post/6963927908444274718",target:"_blank",rel:"noopener noreferrer"}},[t._v("详情"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("进入Gitlab->CICD->Runner 当前可用的runner有")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a27a99428c9a4b83abf631611ec7b8e2~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("p",[t._v("如图所示，该项目可用的runner")]),t._v(" "),n("ul",[n("li",[t._v("左边runner仅可以为当前项目使用，但需要激活一下。")]),t._v(" "),n("li",[t._v("右边为共享的runner, 可以直接使用")]),t._v(" "),n("li",[t._v(".gitlab-ci.yml中以tags和runner的tags关联")])]),t._v(" "),n("h3",{attrs:{id:"_2、先把ci跑起来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、先把ci跑起来"}},[t._v("#")]),t._v(" 2、先把CI跑起来")]),t._v(" "),n("p",[t._v("首先在项目的根目录下新建"),n("code",[t._v(".gitlab-ci.yml")]),t._v("，然后在该文件中配置pipeline的任务，这些任务将会跑在"),n("code",[t._v("gitlab-runner")]),t._v("中。")]),t._v(" "),n("p",[t._v("一个最简单的"),n("code",[t._v(".gitlab-ci.yml")]),t._v("文件，其中CI_COMMIT_BRANCH、GITLAB_USER_LOGIN是一些gitlab定义好的变量，可以直接使用，你也可以定义自己的变量")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('image: "node"\n\nstages:\n  - BuildImage\n\nbefore_script:\n  - echo "before_script"\n  - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."\n  - echo "Hello, $GITLAB_USER_LOGIN!"\n\nbuild:\n  tags:\n    - test\n  stage: BuildImage\n  image: "node"\n  script:\n    - node -v\n')])])]),n("p",[t._v("推送Git仓库")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('git add .gitlab-ci.yml\ngit commit -m "commit ci"\ngit push\n')])])]),n("p",[t._v("进入gitlab-> CI/CD页面，可以看到一个pipeline状态是"),n("code",[t._v("stuck")]),t._v("，这是因为没有Gitlab-runner。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67ee6a0cd779465485fbe3d9a1b3feeb~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("h3",{attrs:{id:"_3、使用gitlab-runner执行pipeline"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、使用gitlab-runner执行pipeline"}},[t._v("#")]),t._v(" 3、使用Gitlab-runner执行pipeline")]),t._v(" "),n("p",[t._v("修改"),n("code",[t._v(".gitlab-ci.yml")]),t._v("，仅展示部分")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('build:\n  # tags,代表要使用的runner,这里改成uaek-c1 \n  tags:\n    - uaek-c1\n  stage: BuildImage\n  image: "node"\n  script:\n    - node -v\n')])])]),n("p",[t._v("提交代码，进入CI/CD页面看到新增了一条pipeline执行完成")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dd88eb858ee43a8956bca44c26f3844~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("p",[t._v("点击新的记录，可以看到对应的Stage，点击当前任务")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27eedd5a62fb4b8a8b9309d60e080ae8~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("p",[t._v("可以看到Gitlab-runner执行"),n("code",[t._v(".gitlab-ci.yml")]),t._v("的具体信息。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60ad7ce21a86418380401b7c120fbe79~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("p",[t._v("到目前为止，已经看到了"),n("code",[t._v(".gitlab-ci.yml")]),t._v("触发到执行的过程，接下来，看看针对这个项目怎样去具体跑CI")]),t._v(" "),n("h2",{attrs:{id:"三、项目实战配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、项目实战配置"}},[t._v("#")]),t._v(" 三、项目实战配置")]),t._v(" "),n("blockquote",[n("p",[t._v("构建Docker镜像参考"),n("a",{attrs:{href:"https://juejin.cn/post/6962037427108380709",title:"https://juejin.cn/post/6962037427108380709",target:"_blank",rel:"noopener noreferrer"}},[t._v("详情"),n("OutboundLink")],1)])]),t._v(" "),n("h3",{attrs:{id:"_1、在项目添加dockerfile文件和nginx配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、在项目添加dockerfile文件和nginx配置文件"}},[t._v("#")]),t._v(" 1、在项目添加Dockerfile文件和Nginx配置文件")]),t._v(" "),n("p",[t._v("(1)、根目录中添加配置文件"),n("code",[t._v("Dockerfile")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('FROM node:10-alpine as builder\nWORKDIR /data/myweb\nCOPY . .\nRUN npm install --registry=https://registry.npm.taobao.org --no-package-lock --no-save\nRUN yarn publish:prod\n\nFROM nginx:alpine as myweb\nRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && echo "Asia/Shanghai" > /etc/timezone \nWORKDIR /data/production\nCOPY ./nginx /etc/nginx/conf.d\nCOPY  --from=builder /data/myweb/build /data/production\nEXPOSE 80, 443\n')])])]),n("p",[t._v("(2)、在项目根目录中新建"),n("code",[t._v("nginx/default.conf")]),t._v("，我们用外挂的nginx配置文件覆盖原来Nginx镜像中的配置文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("server {\n    listen 80;\n    listen [::]:80;\n    server_name localhost;\n\n    location / {\n        root /data/production;\n        index index.html;\n        try_files $uri /index.html;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n    \troot /usr/share/nginx/html;\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2、配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置文件"}},[t._v("#")]),t._v(" 2、配置文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('# 定义全局变量,镜像名称，命名空间，镜像拉取的密码的变量名\nvariables:\n  IMAGE_HUB: "lvpf/myweb" \n  DOCKER_HUB_URL: "hub.docker.com/r/lvpf/myweb"\n\n# 这里打印一些变量，仅仅为了展示，看下这些gitlab预设的变量值，可以去掉\nbefore_script:\n  - echo "VARIABLE CI_COMMIT_SHA IS $CI_COMMIT_SHA!"\n  - echo "VARIABLE CI_COMMIT_TAG IS $CI_COMMIT_TAG!"\n  - echo "VARIABLE CI_PROJECT_DIR IS $CI_PROJECT_DIR!"\n\n# stages顺序运行, 同一个stage的所有job并行\nstages:\n  - BuildImage\n\n# 任务1，构建docker镜像\ndocker-image-master:\n  # 使用的Gitlab Runner标签\n  tags:\n    - uaek-c1\n  # 任务名称\n  stage: BuildImage\n  # 由于当前runner为k8s构建的，所以这里执行docker构建和上传需要通过kaniko镜像，具体可以看下面参考文档（）\n  image: gcr.io/kaniko-project/executor\n  script:\n    # 首先我们需要为我们的镜像生成一个tag，规则是：如果有 git tag，就使用 git tag，如果没有的话，就使用 git commit sha\n    - IMAGE_TAG=$CI_COMMIT_SHA && if [[ -n "$CI_COMMIT_TAG" ]]; then IMAGE_TAG=$CI_COMMIT_TAG; fi\n    - echo $IMAGE_HUB:$IMAGE_TAG\n    - mkdir -p /kaniko/.docker\n    - echo "{\\"auths\\":{\\"$CI_REGISTRY\\":{\\"username\\":\\"$CI_REGISTRY_USER\\",\\"password\\":\\"$CI_REGISTRY_PASSWORD\\"}}}" > /kaniko/.docker/config.json\n    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $DOCKER_HUB_URL:$IMAGE_TAG\n  # 使用 only 来限制这个 job 什么情况下会运行，下面的设置标识只有新的 tag 被创建时才触发CI，如果去掉，每次推送分支都会触发CI\n  only:\n    - tags\n')])])]),n("h3",{attrs:{id:"_3、注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、注意事项"}},[t._v("#")]),t._v(" 3、注意事项")]),t._v(" "),n("ul",[n("li",[t._v("一般公司安全性考虑，不会将镜像推送到hub，公司内网一般也不通，要考虑自建私有镜像仓库")]),t._v(" "),n("li",[t._v("gitlab-runner可以使用的宿主机类型很多，包括云主机、docker、k8s等，构建镜像的解决方式略有不同，可以参考文档")]),t._v(" "),n("li",[t._v("其中一些涉及密码的变量，可以通过"),n("code",[t._v("Gitlab->Setting->CI/CD->Variables")]),t._v("来设置，直接在.gitlab-ci.yml中使用")])]),t._v(" "),n("h2",{attrs:{id:"四、参考文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、参考文档"}},[t._v("#")]),t._v(" 四、参考文档")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgit.ucloudadmin.com%2Fhelp%2Fci%2Fquick_start%2FREADME",title:"https://git.ucloudadmin.com/help/ci/quick_start/README",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab CI快速开始"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.gitlab.com%2Fee%2Fci%2Fdocker%2Fusing_kaniko.html",title:"https://docs.gitlab.com/ee/ci/docker/using_kaniko.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在k8s构建的gitlab-runner中构建镜像-docs"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.codercto.com%2Fa%2F57053.html",title:"https://www.codercto.com/a/57053.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在k8s构建的gitlab-runner中构建镜像-中文"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=i.exports}}]);